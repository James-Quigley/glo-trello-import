{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?2140","webpack:///src/App.vue","webpack:///./src/App.vue?98c8","webpack:///./src/App.vue","webpack:///./src/store.js","webpack:///./src/main.js","webpack:///./src/App.vue?f46a"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Appvue_type_template_id_232dd0fc_render","_vm","this","_h","$createElement","_c","_self","attrs","id","staticClass","_v","staticStyle","min-height","margin-top","display","md-mode","color","href","model","callback","$$v","trelloApiKey","expression","trelloToken","on","click","loadTrello","selectedBoard","_l","board","_s","for","gloToken","importBoard","staticRenderFns","trelloAxios","gloAxios","Appvue_type_script_lang_js","trelloBoards","trelloCards","trelloColumns","trelloLabels","gloBoard","gloColumns","gloLabels","columnMappings","labelMappings","cardMappings","components","methods","event","_this","document","getElementById","style","axios_default","a","baseURL","params","token","then","response","console","log","catch","error","_this2","promises","concat","Promise","all","responses","forEach","label","createBoard","_this3","boardName","filter","b","headers","authorization","post","isPublic","createColumns","_createColumns","asyncToGenerator","regeneratorRuntime","mark","_callee","column","wrap","_context","prev","next","order","sent","t0","createLabels","stop","arguments","_createLabels","_callee2","_loop","labelName","_this4","_context3","_context2","getLabelColor","labels","keys","t1","done","delegateYield","createCards","colorString","g","_createCards","_callee3","column_count","card","board_id","column_id","position","_this5","_context4","idList","idLabels","map","labelId","addDescriptions","_addDescriptions","_callee4","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","tasks","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","checklist","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","item","taskDesc","_i","task","cardId","_context5","undefined","iterator","idChecklists","return","finish","state","description","text","desc","fields","t2","src_Appvue_type_script_lang_js","component","componentNormalizer","App","vue_runtime_esm","use","vuex_esm","store","Store","mutations","actions","config","productionTip","render","h","$mount","_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"js/app.c61c5d6a.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/glo-trello-import/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([3,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('md-toolbar',{staticClass:\"md-primary\"},[_c('span',{staticClass:\"md-title\"},[_vm._v(\"Trello -> Glo Import\")])]),_c('div',[_c('div',{staticClass:\"md-layout md-gutter md-alignment-center\",staticStyle:{\"min-height\":\"55px\",\"margin-top\":\"0px\"}},[_c('div',{staticClass:\"md-layout-item\"},[_c('md-progress-bar',{staticClass:\"md-accent\",staticStyle:{\"display\":\"none\"},attrs:{\"id\":\"progress\",\"md-mode\":\"indeterminate\"}})],1)]),_c('div',{staticClass:\"md-layout md-gutter\"},[_c('div',{staticClass:\"md-layout-item md-small-size-100 md-xsmall-size-100\"},[_c('md-card',{staticClass:\"md-primary\"},[_c('md-card-header',[_c('div',{staticClass:\"md-title\",staticStyle:{\"color\":\"#64dd17\"}},[_vm._v(\"Trello Credentials\")])]),_c('md-card-content',[_c('p',[_vm._v(\"You will need to get your API Key and Token from\\n                            \"),_c('a',{staticClass:\"md-accent\",attrs:{\"href\":\"https://trello.com/app-key\"}},[_vm._v(\"Trello\")]),_vm._v(\".\")]),_c('div',{attrs:{\"id\":\"trello\"}},[_c('md-field',[_c('label',[_vm._v(\"API Key\")]),_c('md-input',{model:{value:(_vm.trelloApiKey),callback:function ($$v) {_vm.trelloApiKey=$$v},expression:\"trelloApiKey\"}})],1),_c('md-field',[_c('label',[_vm._v(\"Token\")]),_c('md-input',{model:{value:(_vm.trelloToken),callback:function ($$v) {_vm.trelloToken=$$v},expression:\"trelloToken\"}})],1)],1)]),_c('md-card-actions',[_c('md-button',{staticClass:\"md-accent md-raised\",on:{\"click\":_vm.loadTrello}},[_vm._v(\"Load Boards\")])],1)],1)],1),_c('div',{staticClass:\"md-layout-item md-small-size-100 md-xsmall-size-100\"},[_c('md-card',{staticClass:\"md-primary\"},[_c('md-card-header',[_c('div',{staticClass:\"md-title\",staticStyle:{\"color\":\"#64dd17\"}},[_vm._v(\"Glo Credentials\")])]),_c('md-card-content',[_c('p',[_vm._v(\"Your Glo Token can be found in the developer tools while on Glo. An official Public API should\\n                            be out soon.\")]),_c('div',{attrs:{\"id\":\"glo\"}},[_c('md-field',[_c('label',[_vm._v(\"Board to Import\")]),_c('md-select',{model:{value:(_vm.selectedBoard),callback:function ($$v) {_vm.selectedBoard=$$v},expression:\"selectedBoard\"}},_vm._l((_vm.trelloBoards),function(board){return _c('md-option',{key:board.id,attrs:{\"value\":board.id}},[_vm._v(\"\\n                                        \"+_vm._s(board.name)+\"\\n                                    \")])}))],1),_c('md-field',[_c('label',{attrs:{\"for\":\"glo-api-token\"}},[_vm._v(\"API Token\")]),_c('md-input',{model:{value:(_vm.gloToken),callback:function ($$v) {_vm.gloToken=$$v},expression:\"gloToken\"}})],1)],1)]),_c('md-card-actions',[_c('md-button',{staticClass:\"md-accent md-raised\",on:{\"click\":_vm.importBoard}},[_vm._v(\"Import!\")])],1)],1)],1)]),_c('div',{staticClass:\"md-layout md-gutter\"},[_c('div',{staticClass:\"md-layout-item\"},[_c('md-card',{staticClass:\"md-primary\"},[_c('md-card-header',[_c('div',{staticClass:\"md-title\",staticStyle:{\"color\":\"#64dd17\"}},[_vm._v(\"Details\")])]),_c('md-card-content',[_c('div',{staticClass:\"md-layout md-gutter\"},[_c('div',{staticClass:\"md-layout-item md-xlarge-size-100 md-large-size-100 md-medium-size-100 md-small-size-100 md-xsmall-size-100\",staticStyle:{\"margin-top\":\"5px\"}},[_c('md-card',[_c('md-card-header',[_c('md-icon',{staticClass:\"md-accent\"},[_vm._v(\"transform\")]),_c('span',{staticClass:\"md-title\"},[_vm._v(\" Summary\")])],1),_c('md-card-content',[_c('p',[_vm._v(\"This application will take an existing\\n                                            \"),_c('a',{staticClass:\"md-accent\",attrs:{\"href\":\"https://trello.com\"}},[_vm._v(\"Trello\")]),_vm._v(\" board and import it into\\n                                            \"),_c('a',{staticClass:\"md-accent\",attrs:{\"href\":\"https://app.gitkraken.com/glo\"}},[_vm._v(\"GitKraken Glo\")]),_vm._v(\"! Note that Glo is under active development, and therefore\\n                                            not all parts of a Trello board may be copied 1:1.\")])])],1)],1),_c('div',{staticClass:\"md-layout-item md-xlarge-size-100 md-large-size-100 md-medium-size-100 md-small-size-100 md-xsmall-size-100\",staticStyle:{\"margin-top\":\"5px\"}},[_c('md-card',[_c('md-card-header',[_c('md-icon',{staticClass:\"md-accent\"},[_vm._v(\"sync_disabled\")]),_c('span',{staticClass:\"md-title\"},[_vm._v(\" One-Time Sync\")])],1),_c('md-card-content',[_c('p',[_vm._v(\"This application is only a one-time import. This will not sync your items back\\n                                            and forth between Trello and Glo.\")])])],1)],1),_c('div',{staticClass:\"md-layout-item md-xlarge-size-100 md-large-size-100 md-medium-size-100 md-small-size-100 md-xsmall-size-100\",staticStyle:{\"margin-top\":\"5px\"}},[_c('md-card',[_c('md-card-header',[_c('md-icon',{staticClass:\"md-accent\"},[_vm._v(\"security\")]),_c('span',{staticClass:\"md-title\"},[_vm._v(\" Security\")])],1),_c('md-card-content',[_c('p',[_vm._v(\"We ask for your credentials for both services so that we can make API calls on\\n                                            your behalf, automating the copy process. This application is entirely client\\n                                            side, meaning the only time the credentials leave this page is when they\\n                                            are used to make those API calls. \\n                                            \")])])],1)],1),_c('div',{staticClass:\"md-layout-item md-xlarge-size-100 md-large-size-100 md-medium-size-100 md-small-size-100 md-xsmall-size-100\",staticStyle:{\"margin-top\":\"5px\"}},[_c('md-card',[_c('md-card-header',[_c('md-icon',{staticClass:\"md-accent\"},[_vm._v(\"list\")]),_c('span',{staticClass:\"md-title\"},[_vm._v(\" Copied Items:\")])],1),_c('md-card-content',[_c('md-list',[_c('md-list-item',[_vm._v(\"Board Name\")]),_c('md-list-item',[_vm._v(\"Board Columns\")]),_c('md-list-item',[_vm._v(\"Labels\")]),_c('md-list-item',[_vm._v(\"Card Name\")]),_c('md-list-item',[_vm._v(\"Card Description\")]),_c('md-list-item',[_vm._v(\"Card Tasks\")])],1)],1)],1)],1)])]),_c('md-card-actions')],1)],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <!-- eslint-disable -->\n    <div id=\"app\" class=\"\">\n\n        <md-toolbar class=\"md-primary\">\n            <span class=\"md-title\">Trello -> Glo Import</span>\n        </md-toolbar>\n\n        <div>\n\n            <div class=\"md-layout md-gutter md-alignment-center\" style=\"min-height:55px;margin-top:0px;\">\n                <div class=\"md-layout-item\">\n                    <md-progress-bar id=\"progress\" class=\"md-accent\" md-mode=\"indeterminate\" style=\"display:none\"></md-progress-bar>\n                </div>\n            </div>\n\n            <div class=\"md-layout md-gutter\">\n                <div class=\"md-layout-item md-small-size-100 md-xsmall-size-100\">\n                    <md-card class=\"md-primary\">\n                        <md-card-header>\n                            <div class=\"md-title\" style=\"color: #64dd17;\">Trello Credentials</div>\n                        </md-card-header>\n\n                        <md-card-content>\n                            <p>You will need to get your API Key and Token from\n                                <a class=\"md-accent\" href=\"https://trello.com/app-key\">Trello</a>.</p>\n                            <div id=\"trello\">\n                                <md-field>\n                                    <label>API Key</label>\n                                    <md-input v-model=\"trelloApiKey\"></md-input>\n                                </md-field>\n                                <md-field>\n                                    <label>Token</label>\n                                    <md-input v-model=\"trelloToken\"></md-input>\n                                </md-field>\n                            </div>\n                        </md-card-content>\n\n                        <md-card-actions>\n                            <md-button v-on:click=\"loadTrello\" class=\"md-accent md-raised\">Load Boards</md-button>\n                        </md-card-actions>\n                    </md-card>\n                </div>\n\n                <div class=\"md-layout-item md-small-size-100 md-xsmall-size-100\">\n                    <md-card class=\"md-primary\">\n                        <md-card-header>\n                            <div class=\"md-title\" style=\"color: #64dd17;\">Glo Credentials</div>\n                        </md-card-header>\n\n                        <md-card-content>\n                            <p>Your Glo Token can be found in the developer tools while on Glo. An official Public API should\n                                be out soon.</p>\n                            <div id=\"glo\">\n                                <md-field>\n                                    <label>Board to Import</label>\n                                    <md-select v-model=\"selectedBoard\">\n                                        <md-option v-for=\"board of trelloBoards\" :key=\"board.id\" v-bind:value=\"board.id\">\n                                            {{board.name}}\n                                        </md-option>\n                                    </md-select>\n                                </md-field>\n                                <md-field>\n                                    <label for=\"glo-api-token\">API Token</label>\n                                    <md-input v-model=\"gloToken\"></md-input>\n                                </md-field>\n                            </div>\n                        </md-card-content>\n\n                        <md-card-actions>\n                            <md-button v-on:click=\"importBoard\" class=\"md-accent md-raised\">Import!</md-button>\n                        </md-card-actions>\n                    </md-card>\n                </div>\n            </div>\n\n\n\n\n            <div class=\"md-layout md-gutter\">\n                <div class=\"md-layout-item\">\n                    <md-card class=\"md-primary\">\n                        <md-card-header>\n                            <div class=\"md-title\" style=\"color: #64dd17;\">Details</div>\n                        </md-card-header>\n                        <md-card-content>\n                            <div class=\"md-layout md-gutter\">\n                                <div style=\"margin-top:5px;\" class=\"md-layout-item md-xlarge-size-100 md-large-size-100 md-medium-size-100 md-small-size-100 md-xsmall-size-100\">\n                                    <md-card>\n                                        <md-card-header>\n                                            <md-icon class=\"md-accent\">transform</md-icon>\n                                            <span class=\"md-title\"> Summary</span>\n                                        </md-card-header>\n                                        <md-card-content>\n                                            <p>This application will take an existing\n                                                <a class=\"md-accent\" href=\"https://trello.com\">Trello</a> board and import it into\n                                                <a class=\"md-accent\" href=\"https://app.gitkraken.com/glo\">GitKraken Glo</a>! Note that Glo is under active development, and therefore\n                                                not all parts of a Trello board may be copied 1:1.</p>\n                                        </md-card-content>\n                                    </md-card>\n                                </div>\n                                <div style=\"margin-top:5px;\" class=\"md-layout-item md-xlarge-size-100 md-large-size-100 md-medium-size-100 md-small-size-100 md-xsmall-size-100\">\n                                    <md-card>\n                                        <md-card-header>\n                                            <md-icon class=\"md-accent\">sync_disabled</md-icon>\n                                            <span class=\"md-title\"> One-Time Sync</span>\n                                        </md-card-header>\n                                        <md-card-content>\n                                            <p>This application is only a one-time import. This will not sync your items back\n                                                and forth between Trello and Glo.</p>\n                                        </md-card-content>\n                                    </md-card>\n                                </div>\n                                <div style=\"margin-top:5px;\" class=\"md-layout-item md-xlarge-size-100 md-large-size-100 md-medium-size-100 md-small-size-100 md-xsmall-size-100\">\n                                    <md-card>\n                                        <md-card-header>\n                                            <md-icon class=\"md-accent\">security</md-icon>\n                                            <span class=\"md-title\"> Security</span>\n                                        </md-card-header>\n                                        <md-card-content>\n                                            <p>We ask for your credentials for both services so that we can make API calls on\n                                                your behalf, automating the copy process. This application is entirely client\n                                                side, meaning the only time the credentials leave this page is when they\n                                                are used to make those API calls. \n                                                <!-- Additionally, the code is open source on\n                                                <a class=\"md-accent\" href=\"https://github.com/James-Quigley/glo-trello-import\">GitHub</a>. -->\n                                                </p>\n                                        </md-card-content>\n                                    </md-card>\n                                </div>\n                                <div style=\"margin-top:5px;\" class=\"md-layout-item md-xlarge-size-100 md-large-size-100 md-medium-size-100 md-small-size-100 md-xsmall-size-100\">\n                                    <md-card>\n                                        <md-card-header>\n                                            <md-icon class=\"md-accent\">list</md-icon>\n                                            <span class=\"md-title\"> Copied Items:</span>\n                                        </md-card-header>\n                                        <md-card-content>\n                                            <md-list>\n                                                <md-list-item>Board Name</md-list-item>\n                                                <md-list-item>Board Columns</md-list-item>\n                                                <md-list-item>Labels</md-list-item>\n                                                <md-list-item>Card Name</md-list-item>\n                                                <md-list-item>Card Description</md-list-item>\n                                                <md-list-item>Card Tasks</md-list-item>\n                                            </md-list>\n                                        </md-card-content>\n                                    </md-card>\n                                </div>\n                            </div>\n                        </md-card-content>\n                        <md-card-actions>\n\n                        </md-card-actions>\n                    </md-card>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport axios from \"axios\";\n\nlet trelloAxios = null;\nlet gloAxios = null;\n\nexport default {\n    name: \"app\",\n    data: () => ({\n        trelloApiKey: \"\",\n        trelloToken: \"\",\n        trelloBoards: [],\n        trelloCards: [],\n        trelloColumns: [],\n        trelloLabels: {},\n        selectedBoard: \"\",\n        gloToken: \"\",\n        gloBoard: null,\n        gloColumns: {},\n        gloLabels: {},\n        columnMappings: {},\n        labelMappings: {},\n        cardMappings: {}\n    }),\n    components: {},\n    methods: {\n        loadTrello: function(event) {\n            document.getElementById(\"progress\").style.display = \"block\";\n            trelloAxios = axios.create({\n                baseURL: \"https://api.trello.com/1\",\n                params: {\n                    key: this.trelloApiKey,\n                    token: this.trelloToken\n                }\n            });\n            trelloAxios\n                .get(\"/members/me/boards\")\n                .then(response => {\n                    console.log(response);\n                    this.trelloBoards = response.data;\n                    document.getElementById(\"progress\").style.display = \"none\";\n                })\n                .catch(function(error) {\n                    console.log(error);\n                });\n        },\n        importBoard: function(event) {\n            document.getElementById(\"progress\").style.display = \"block\";\n            console.log(this.selectedBoard);\n            let promises = [\n                trelloAxios.get(`/boards/${this.selectedBoard}/cards`),\n                trelloAxios.get(`/boards/${this.selectedBoard}/lists`),\n                trelloAxios.get(`/boards/${this.selectedBoard}/labels`)\n            ];\n\n            Promise.all(promises)\n                .then(responses => {\n                    console.log(\"cards\", responses[0]);\n                    this.trelloCards = responses[0].data;\n                    console.log(\"columns\", responses[1]);\n                    this.trelloColumns = responses[1].data;\n                    console.log(\"labels\", responses[2]);\n                    responses[2].data.forEach(label => {\n                        this.trelloLabels[label.name] = label;\n                    });\n                    this.createBoard();\n                })\n                .catch(error => {\n                    console.error(\"uh oh\", error);\n                });\n        },\n        createBoard: function() {\n            const boardName = this.trelloBoards.filter(\n                b => b.id == this.selectedBoard\n            )[0].name;\n\n            gloAxios = axios.create({\n                baseURL: \"https://app.gitkraken.com/api/glo/\",\n                headers: {\n                    authorization: this.gloToken\n                }\n            });\n            console.log(\"Creating Glo Board with name:\", boardName);\n            gloAxios\n                .post(\"/boards\", {\n                    name: boardName,\n                    isPublic: false\n                })\n                .then(response => {\n                    console.log(\"Board created\", response);\n                    this.gloBoard = response.data;\n                    this.createColumns();\n                });\n        },\n        createColumns: async function() {\n            console.log(\"Creating columns in Glo\");\n            try {\n                for (let i = 0; i < this.trelloColumns.length; i++) {\n                    let column = this.trelloColumns[i];\n                    const response = await gloAxios.post(\n                        `/boards/${this.gloBoard.id}/columns`,\n                        {\n                            name: column.name,\n                            order: i\n                        }\n                    );\n                    this.gloColumns[response.data.id] = response.data;\n                    this.columnMappings[column.id] = response.data;\n                }\n            } catch (error) {\n                console.error(\"Failed to create columns\", error);\n            }\n            console.log(\"Created columns\", this.gloColumns);\n            this.createLabels();\n        },\n        createLabels: async function() {\n            console.log(\"Creating labels in Glo\");\n            for (let labelName in this.trelloLabels) {\n                let label = this.trelloLabels[labelName];\n                if (label.name != \"\") {\n                    const response = await gloAxios.post(\n                        `/boards/${this.gloBoard.id}/labels`,\n                        {\n                            name: label.name,\n                            color: this.getLabelColor(label.color)\n                        }\n                    );\n                    this.gloLabels[response.data.id] = response.data;\n                    this.labelMappings[label.id] = response.data.labels.filter(\n                        l => l.name == label.name\n                    )[0];\n                }\n            }\n            console.log(\"Created labels\", this.gloLabels);\n            console.log(\"Label mapping\", this.labelMappings);\n            this.createCards();\n        },\n        getLabelColor: function(colorString) {\n            switch (colorString) {\n                case \"yellow\":\n                    return {\n                        r: 230,\n                        g: 215,\n                        b: 71\n                    };\n                case \"purple\":\n                    return {\n                        r: 157,\n                        g: 104,\n                        b: 255\n                    };\n                case \"blue\":\n                    return {\n                        r: 0,\n                        g: 97,\n                        b: 173\n                    };\n                case \"red\":\n                    return {\n                        r: 187,\n                        g: 45,\n                        b: 41\n                    };\n                case \"green\":\n                    return {\n                        r: 31,\n                        g: 126,\n                        b: 56\n                    };\n                case \"orange\":\n                    return {\n                        r: 240,\n                        g: 147,\n                        b: 43\n                    };\n                case \"black\":\n                    return {\n                        r: 77,\n                        g: 77,\n                        b: 77\n                    };\n                case \"sky\":\n                    return {\n                        r: 30,\n                        g: 192,\n                        b: 193\n                    };\n                case \"pink\":\n                    return {\n                        r: 241,\n                        g: 87,\n                        b: 218\n                    };\n                case \"lime\":\n                    return {\n                        r: 89,\n                        g: 196,\n                        b: 102\n                    };\n                case null:\n                    return {\n                        r: 182,\n                        g: 187,\n                        b: 191\n                    };\n            }\n        },\n        createCards: async function() {\n            console.log(\"Creating cards in Glo\");\n            let column_count = {};\n            for (let i = 0; i < this.trelloCards.length; i++) {\n                let card = this.trelloCards[i];\n\n                let board_id = this.gloBoard.id;\n                let column_id = this.columnMappings[card.idList].id;\n                let labels = card.idLabels.map(labelId => ({\n                    id: this.labelMappings[labelId].id,\n                    name: this.labelMappings[labelId].name\n                }));\n\n                if (column_count[column_id] == null) {\n                    column_count[column_id] = 0;\n                }\n                let position = column_count[column_id]++;\n\n                console.log(\n                    \"board\",\n                    board_id,\n                    \"column\",\n                    column_id,\n                    \"labels\",\n                    labels,\n                    \"position\",\n                    position\n                );\n\n                const response = await gloAxios.post(\n                    `/boards/${this.gloBoard.id}/cards`,\n                    {\n                        board_id,\n                        column_id,\n                        labels,\n                        name: card.name,\n                        position\n                    }\n                );\n\n                this.cardMappings[card.id] = response.data;\n            }\n            console.log(\"Created cards!\");\n\n            this.addDescriptions();\n        },\n        addDescriptions: async function() {\n            console.log(\"Adding descriptions to cards in Glo\");\n\n            for (let card of this.trelloCards) {\n                let tasks = [];\n\n                for (let id of card.idChecklists) {\n                    const checklist = (await trelloAxios.get(\n                        `/checklists/${id}/checkItems`\n                    )).data;\n\n                    for (let item of checklist) {\n                        tasks.push(item);\n                    }\n                }\n\n                let taskDesc = \"\";\n\n                for (let task of tasks) {\n                    task.state == \"complete\"\n                        ? (taskDesc += \"- [x] \")\n                        : (taskDesc += \"- [ ] \");\n                    taskDesc += `${task.name}\\n`;\n                }\n                console.log(\"tasks for card\", tasks);\n\n                console.log(\"Card mappings\", this.cardMappings);\n                console.log(\"card\", card);\n                let cardId = this.cardMappings[card.id].id;\n                gloAxios.post(`/boards/${this.gloBoard.id}/cards/${cardId}`, {\n                    id: cardId,\n                    description: {\n                        text: `${card.desc}\\n${taskDesc}`\n                    },\n                    fields: [\n                        \"description\",\n                        \"total_task_count\",\n                        \"completed_task_count\"\n                    ]\n                });\n            }\n\n            console.log(\"Added Descriptions!\");\n            document.getElementById(\"progress\").style.display = \"none\";\n        }\n    }\n};\n</script>\n\n<style lang=\"scss\">\n#progress {\n    margin-top: 50px;\n}\n\n.md-layout.md-gutter {\n    margin-right: 0;\n    margin-left: 0;\n    margin-top: 50px;\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=232dd0fc\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n\n  },\n  mutations: {\n\n  },\n  actions: {\n\n  },\n});\n","/* eslint-disable */\nimport {\n  MdButton,\n  MdCard,\n  MdField,\n  MdMenu,\n  MdList,\n  MdApp,\n  MdContent,\n  MdToolbar,\n  MdProgress,\n} from 'vue-material/dist/components';\nimport 'vue-material/dist/vue-material.min.css'\nimport 'vue-material/dist/theme/black-green-dark.css'\n// import 'vue-material/dist/theme/default-dark.css'\n\nimport Vue from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\nVue.config.productionTip = false;\n\n\nVue.use(MdButton);\nVue.use(MdCard);\nVue.use(MdField);\nVue.use(MdMenu);\nVue.use(MdList);\nVue.use(MdApp);\nVue.use(MdContent);\nVue.use(MdToolbar);\nVue.use(MdProgress);\nnew Vue({\n  store,\n  render: h => h(App),\n}).$mount('#app');","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss\""],"sourceRoot":""}